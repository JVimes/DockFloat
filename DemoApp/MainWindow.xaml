<Window x:Class="DemoApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DemoApp"
        xmlns:df="clr-namespace:DockFloat;assembly=DockFloat"
        mc:Ignorable="d"
        Title="Demo"
        WindowStartupLocation="CenterScreen"
        Width="525"
        Height="350">
    <Window.Resources>
        <!-- Note, df:Dock is unrelated to WPF's Dock or DockPanel classes. -->
        <Style TargetType="df:Dock">
            <Setter Property="Padding" Value="1"/>
        </Style>

        <Style x:Key="Annotation" TargetType="TextBlock">
            <Setter Property="Margin" Value="0,0,0,10"/>
            <Setter Property="Foreground" Value="Green"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>

        <!-- Have to use x:key because implicit styles outside of df:Dock don't apply inside its floating window. -->
        <Style x:Key="ContentStyle" TargetType="Border">
            <Style.Resources>
                <!-- Implicit style here works because it's nested in a style with x:key. -->
                <Style TargetType="TextBlock">
                    <Setter Property="Margin" Value="0,0,0,10"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                </Style>
            </Style.Resources>
            
            <Setter Property="BorderBrush" Value="Green"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="10"/>
            <Setter Property="CornerRadius" Value="5"/>
        </Style>
    </Window.Resources>

    <DockPanel>

        <df:Dock Background="SkyBlue" Width="140" DockPanel.Dock="Left"
                 WindowTitle="Left Panel" IsButtonVisible="False"
                 IsFloating="{Binding IsChecked, ElementName=isFloatingLeft}">
            <Border Style="{StaticResource ContentStyle}">
                <StackPanel>
                    <TextBlock Style="{StaticResource Annotation}" Text="IsButtonVisible is False (use IsFloating check box)."/>
                    <TextBlock Style="{StaticResource Annotation}" Text="Dock background applies to floating window."/>
                    <TextBlock Text="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Width: {0}}" Margin="0"/>
                    <TextBlock Text="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Height: {0}}"/>
                    <TextBlock Text="{Binding ElementName=bindingTest1, Path=IsChecked, StringFormat=BindingTest1: {0}}"/>
                </StackPanel>
            </Border>
        </df:Dock>

        <df:Dock Background="#333" Foreground="White" Width="150.5" DockPanel.Dock="Right"
                 ButtonOverlapsContent="False">

            <!-- Example of custom pop-out icon. In this case, it's "PopOutIconLight" from DockFloat library but you can use something else. -->
            <df:Dock.Resources>
                <ResourceDictionary Source="/DockFloat;component/Icons/Icons.xaml"/>
            </df:Dock.Resources>
            <df:Dock.Icon>
                <Viewbox Child="{StaticResource PopOutIconLight}" Height="32" Width="32" Margin="1"/>
            </df:Dock.Icon>

            <Border Style="{StaticResource ContentStyle}">
                <StackPanel>
                    <TextBlock Style="{StaticResource Annotation}" Text="ButtonOverlapsContent is False, extra space above."/>
                    <TextBlock Style="{StaticResource Annotation}" Text="Custom pop-out icon (big, light color)."/>
                    <TextBlock Text="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Width: {0}}" Margin="0"/>
                    <TextBlock Text="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Height: {0}}"/>
                    <CheckBox x:Name="bindingTest2" TextElement.FontSize="12" Content="BindingTest2" IsChecked="True" Foreground="White"/>
                </StackPanel>
            </Border>
        </df:Dock>

        <df:Dock Background="PaleGoldenrod" Height="115" DockPanel.Dock="Bottom"
                 WindowTitle="{Binding Text, ElementName=bottomPanelTitle}" ButtonOverlapsContent="False">
            <Border Style="{StaticResource ContentStyle}">
                <StackPanel>
                    <TextBlock Style="{StaticResource Annotation}" Text="ButtonOverlapsContent is False, extra space on right when panel is wide."/>
                    <TextBlock Text="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Width: {0}}" Margin="0"/>
                    <TextBlock Text="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, StringFormat=Height: {0}}"/>
                </StackPanel>
            </Border>
        </df:Dock>

        <Border Background="LightGray" Padding="10">
            <StackPanel>
                <CheckBox x:Name="bindingTest1" Content="BindingTest1" IsChecked="True" Margin="0,0,0,5"/>
                <TextBlock Text="{Binding ElementName=bindingTest2, Path=IsChecked, StringFormat=BindingTest2: {0}}" Margin="0,0,0,5"/>
                <CheckBox x:Name="isFloatingLeft" Content="IsFloating (left panel)" HorizontalAlignment="Left" Padding="10,0" Margin="0,0,0,5"/>
                <Button Content="Float all" HorizontalAlignment="Left" Padding="10,0" Click="OnFloatAllClick" Margin="0,0,0,5"/>
                <StackPanel>
                    <TextBlock Text="Edit: "/>
                    <TextBox x:Name="bottomPanelTitle" Text="Bottom Dock Floating Window Title"/>
                </StackPanel>
            </StackPanel>
        </Border>

    </DockPanel>
</Window>
